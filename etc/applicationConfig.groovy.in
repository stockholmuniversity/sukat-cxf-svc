import se.su.it.svc.ldap.SuCard
import se.su.it.svc.ldap.SuPerson
import se.su.it.svc.ldap.SuPersonStub
import se.su.it.svc.ldap.SuRole
import se.su.it.svc.ldap.SuService
import se.su.it.svc.ldap.SuServiceDescription
import se.su.it.svc.ldap.SuSubAccount

/**
*  enrollment.create.skip does the following.
*  true = Create user in SUKAT, DO NOT create in AFS and KDC.
*  false = Create user in SUKAT, AFS and KDC.
*/
enrollment {
  create {
    skip = "%%SKIP_CREATE%%"
  }
}

soap {
  publishedEndpointUrl = "%%PUBLISHED_ENDPOINT_URL%%"
}

ldap {
  accounts {
    parent = "%%DEFAULT_PARENT%%"
  }
  ro {
    name = "ldapreadonly"
    url = "ldap://ldap%%ALTINSTANCE%%.su.se"
  }
  rw {
    name = "ldapreadwrite"
    url = "ldap://%%LDAPSERVERRW%%"
  }
}

sucard {
  database {
    driver = "%%SUCARD_DB_DRIVER%%"
    url = "jdbc:mysql://%%SUCARDDBHOST%%:3306/sucard?autoReconnect=true"
    user = "%%SUCARD_DB_USER%%"
    password = "%%SUCARD_DB_PASSWORD%%"
  }
}

ehcache {
  maxElementsInMemory             = 10000
  eternal                         = false
  timeToIdleSeconds               = 120
  timeToLiveSeconds               = 600
  overflowToDisk                  = false
  diskPersistent                  = false
  diskExpiryThreadIntervalSeconds = 120
  memoryStoreEvictionPolicy       = "LRU"
}

directories {
  "${ldap.ro.name}" {
    url = "${ldap.ro.url}"
    base = ""
    userDn = ""
    password = ""
    ignorePartialResultException = false
    env = [
        "java.naming.security.authentication": "GSSAPI",
        "javax.security.sasl.server.authentication": "true"
    ]
    searchControls {
      countLimit = 500
      timeLimit = 120000
      searchScope = "subtree"
    }
  }
  "${ldap.rw.name}" {
    url = "${ldap.rw.url}"
    base = ""
    userDn = ""
    password = ""
    ignorePartialResultException = false
    env = [
        "java.naming.security.authentication": "GSSAPI",
        "javax.security.sasl.server.authentication": "true"
    ]
    searchControls {
      countLimit = 500
      timeLimit = 120000
      searchScope = "subtree"
    }
  }
}
schemas = [
    SuPersonStub,
    SuRole,
    SuCard,
    SuPerson,
    SuServiceDescription,
    SuService,
    SuSubAccount,
]
